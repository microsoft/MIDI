<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppDescription" xml:space="preserve">
    <value>Utility application for interacting with Windows MIDI Services from the command line. Requires that Windows MIDI Services is installed and enabled on the PC.</value>
  </data>
  <data name="AppShortName" xml:space="preserve">
    <value>MIDI Console (Preview)</value>
  </data>
  <data name="AppTitle" xml:space="preserve">
    <value>Microsoft Windows MIDI Services Console</value>
  </data>
  <data name="CommandEndpointDescription" xml:space="preserve">
    <value>Perform operations on a single endpoint, including reporting details, sending messages, monitoring, and more. If you leave out the Instance Id, you will be prompted to select from a list.</value>
  </data>
  <data name="CommandEndpointPropertiesDescription" xml:space="preserve">
    <value>List out system-captured metadata properties for the specified endpoint</value>
  </data>
  <data name="CommandEndpointRequestDescription" xml:space="preserve">
    <value>Send requests for specified MIDI 2.0 in-protocol data from an endpoint. Use a separate console or application to view the responses.</value>
  </data>
  <data name="CommandEndpointRequestEndpointMetadataDescription" xml:space="preserve">
    <value>Send an endpoint discovery message to the endpoint. You can monitor incoming messages in another window, or watch property changes</value>
  </data>
  <data name="CommandEndpointRequestFunctionBlocksDescription" xml:space="preserve">
    <value>Send a function block request message to the endpoint. You can monitor incoming messages or the device properties in another window</value>
  </data>
  <data name="CommandEnumerateActiveSessionsDescription" xml:space="preserve">
    <value>List all currently active Windows MIDI Services sessions on this PC.</value>
  </data>
  <data name="CommandEnumerateDescription" xml:space="preserve">
    <value>Enumerate (list) endpoints and transports</value>
  </data>
  <data name="CommandEnumerateEndpointsDescription" xml:space="preserve">
    <value>List MIDI UMP endpoints visible to Windows MIDI Services-aware applications</value>
  </data>
  <data name="CommandEnumerateLegacyEndpointsDescription" xml:space="preserve">
    <value>List MIDI 1.0 endpoints as seen in apps using older MIDI APIs</value>
  </data>
  <data name="CommandEnumerateTransportPluginsDescription" xml:space="preserve">
    <value>List all MIDI transport plugins installed on this PC.</value>
  </data>
  <data name="CommandMonitorEndpointDescription" xml:space="preserve">
    <value>Monitors a UMP endpoint for incoming messages and optionally displays them as they arrive.</value>
  </data>
  <data name="CommandSendMessageDescription" xml:space="preserve">
    <value>Send a single message to a UMP endpoint as a list of up to four 32 bit MIDI words</value>
  </data>
  <data name="CommandSendMessagesFileDescription" xml:space="preserve">
    <value>Sends a text file of UMP MIDI words to the specified endpoint. See arguments and options for format and delimiters.</value>
  </data>
  <data name="CommandServiceDescription" xml:space="preserve">
    <value>Perform operations on the service, such as checking to see if it is running, pinging the standard ping loopback, etc. Service management commands must be run from an Administrator console.</value>
  </data>
  <data name="CommandServicePingDescription" xml:space="preserve">
    <value>Ping the MIDI Windows Service</value>
  </data>
  <data name="CommandServiceRestartDescription" xml:space="preserve">
    <value>Restart the MIDI service. This will close all open connections, remove any non-persistent configuration, and otherwise reset the MIDI system. Must be run as Administrator.</value>
  </data>
  <data name="CommandServiceStartDescription" xml:space="preserve">
    <value>Start the MIDI Service if it is currently stopped. Must be run as Administrator.</value>
  </data>
  <data name="CommandServiceStatusDescription" xml:space="preserve">
    <value>Check to see if the Windows Service is running</value>
  </data>
  <data name="CommandServiceStopDescription" xml:space="preserve">
    <value>Stops the MIDI Service, freeing up all resources in use, closing all devices, and clearing any runtime configuration. Must be run as Administrator.</value>
  </data>
  <data name="CommandTimeDescription" xml:space="preserve">
    <value>Get the current MIDI clock timestamp value and information about the clock resolution.</value>
  </data>
  <data name="CommandWatchEndpointsDescription" xml:space="preserve">
    <value>Watch endpoints for add/remove and PnP property change notifications</value>
  </data>
  <data name="CommonStringDirectionSingular" xml:space="preserve">
    <value>Direction</value>
  </data>
  <data name="CommonStringGroupPlural" xml:space="preserve">
    <value>Groups</value>
  </data>
  <data name="CommonStringGroupSingular" xml:space="preserve">
    <value>Group</value>
  </data>
  <data name="CommonStringGroupTerminalBlockSingular" xml:space="preserve">
    <value>Group Terminal Block</value>
  </data>
  <data name="CommonStringIndexPlural" xml:space="preserve">
    <value>Indexes</value>
  </data>
  <data name="CommonStringIndexSingular" xml:space="preserve">
    <value>Index</value>
  </data>
  <data name="CommonStringKBPS" xml:space="preserve">
    <value>kbps</value>
  </data>
  <data name="CommonStringMIDI" xml:space="preserve">
    <value>MIDI</value>
  </data>
  <data name="CommonStringProtocolSingular" xml:space="preserve">
    <value>Protocol</value>
  </data>
  <data name="CommonTableHeaderIndex" xml:space="preserve">
    <value>Index</value>
  </data>
  <data name="EndpointDisconnected" xml:space="preserve">
    <value>Endpoint disconnected</value>
  </data>
  <data name="EndpointPickerPleaseSelectEndpoint" xml:space="preserve">
    <value>Please select an endpoint</value>
  </data>
  <data name="ErrorEnumEndpointsFailed" xml:space="preserve">
    <value>Enumerating endpoints failed. Is the MIDI service running?</value>
  </data>
  <data name="ErrorGeneralFailReasonWinRTActivation" xml:space="preserve">
    <value>The WinRT types could not be activated. Is Windows MIDI Services installed?</value>
  </data>
  <data name="ErrorPingTestFailed" xml:space="preserve">
    <value>Ping test failed</value>
  </data>
  <data name="ErrorPingTestFailReasonSummaryNull" xml:space="preserve">
    <value>Ping result summary is null</value>
  </data>
  <data name="ErrorUnableToCreateEndpointConnection" xml:space="preserve">
    <value>Unable to create endpoint connection. Is the endpoint Id correct? Is the type of endpoint correct?</value>
  </data>
  <data name="ErrorUnableToCreateSession" xml:space="preserve">
    <value>Unable to create session.</value>
  </data>
  <data name="ErrorUnableToOpenEndpoint" xml:space="preserve">
    <value>Unable to open specified endpoint.</value>
  </data>
  <data name="ErrorUnableToSendMessage" xml:space="preserve">
    <value>Unable to send message to endpoint</value>
  </data>
  <data name="FunctionBlockNumberInvalid" xml:space="preserve">
    <value>The function block number is invalid. Please request a number between 0 and 31, inclusive.</value>
  </data>
  <data name="FunctionBlockRequestInvalid" xml:space="preserve">
    <value>The function block request is invalid. Please request at last one data item.</value>
  </data>
  <data name="GenericAverage" xml:space="preserve">
    <value>Average</value>
  </data>
  <data name="GenericClockTicks" xml:space="preserve">
    <value>clock ticks</value>
  </data>
  <data name="GenericCount" xml:space="preserve">
    <value>Count</value>
  </data>
  <data name="GenericMicroseconds" xml:space="preserve">
    <value>microseconds</value>
  </data>
  <data name="GenericMilliseconds" xml:space="preserve">
    <value>milliseconds</value>
  </data>
  <data name="GenericResponses" xml:space="preserve">
    <value>responses</value>
  </data>
  <data name="GenericTotal" xml:space="preserve">
    <value>Total</value>
  </data>
  <data name="InteractiveEndpointMenuPleaseSelectOption" xml:space="preserve">
    <value>Please select one of the following</value>
  </data>
  <data name="MessageValidationErrorInvalidUmp" xml:space="preserve">
    <value>The data does not result in a valid UMP</value>
  </data>
  <data name="MessageValidationErrorTooFewWords" xml:space="preserve">
    <value>Please provide at least one valid 32-bit MIDI word</value>
  </data>
  <data name="MessageValidationErrorTooManyWords" xml:space="preserve">
    <value>Please provide up to four valid 32-bit MIDI words, comprising a single valid UMP.</value>
  </data>
  <data name="MonitorEndpointResultTableColumnHeaderTimestamp" xml:space="preserve">
    <value>Timestamp</value>
  </data>
  <data name="MonitorEndpointResultTableColumnHeaderWordsReceived" xml:space="preserve">
    <value>MIDI Words Received</value>
  </data>
  <data name="MonitorEscapePressedMessage" xml:space="preserve">
    <value>Escape key pressed. Monitoring terminated.</value>
  </data>
  <data name="MonitorMonitoringOnEndpointLabel" xml:space="preserve">
    <value>Monitoring incoming messages on</value>
  </data>
  <data name="MonitorPressEscapeToStopMonitoringMessage" xml:space="preserve">
    <value>Press escape to stop monitoring.</value>
  </data>
  <data name="MonitorSessionNameSuffix" xml:space="preserve">
    <value>Monitor</value>
  </data>
  <data name="ParameterCaptureMessagesAnnotate" xml:space="preserve">
    <value>True to annotate messages written to the file. Annotations begin with the # sign and are written on the line before the UMP data line. The annotation includes timestamp information as well as the specific message type.</value>
  </data>
  <data name="ParameterCaptureMessagesFieldDebugWarnSkippedIncrement" xml:space="preserve">
    <value>For incoming streams where the last word is incremented by one each time (a developer debugging approach) warn when there are gaps.</value>
  </data>
  <data name="ParameterCaptureMessagesFieldDelimiter" xml:space="preserve">
    <value>Delimiter to separate fields. Valid values include:</value>
  </data>
  <data name="ParameterCaptureMessagesFieldFormat" xml:space="preserve">
    <value>Format for the fields. Hex prefix is "0x", suffix is "h". Decimal values do not have leading zeroes. Valid values include:</value>
  </data>
  <data name="ParameterCaptureMessagesFilter" xml:space="preserve">
    <value>Filter for the messages. Valid values include:</value>
  </data>
  <data name="ParameterCaptureMessagesIncludeTimestamps" xml:space="preserve">
    <value>True to include the timestamp as the first field for each message.</value>
  </data>
  <data name="ParameterCaptureMessagesOutputFile" xml:space="preserve">
    <value>Capture messages to the specified file. If the file exists, it will be appended to.</value>
  </data>
  <data name="ParameterCommonEndpointIdDescription" xml:space="preserve">
    <value>Endpoint Id (also called a Device Instance Id) of the endpoint as used in Windows.Devices.Enumeration. This includes the MIDI interface GUID at the end of the string. You can find the Endpoint Ids by enumerating endpoints through this app. If you leave off the Id, we'll re-enumerate them and provide a list for you to pick from.</value>
  </data>
  <data name="ParameterEndpointPropertiesIncludeRaw" xml:space="preserve">
    <value>Include the full list of raw property keys and values for the endpoint. Typically useful only for debugging purposes.</value>
  </data>
  <data name="ParameterEndpointPropertiesVerbose" xml:space="preserve">
    <value>Include additional detailed information about the endpoint.</value>
  </data>
  <data name="ParameterEndpointUpdateName" xml:space="preserve">
    <value>New endpoint name</value>
  </data>
  <data name="ParameterEnumEndpointsDirection" xml:space="preserve">
    <value>The direction of data flow for the endpoints to list</value>
  </data>
  <data name="ParameterEnumEndpointsIncludeAll" xml:space="preserve">
    <value>List all recognized endpoints, including internal ones and ones an application may be unable to connect to directly.</value>
  </data>
  <data name="ParameterEnumEndpointsIncludeEndpointId" xml:space="preserve">
    <value>Include the UMP Endpoint Id in the output</value>
  </data>
  <data name="ParameterEnumEndpointsIncludeLoopbackEndpoints" xml:space="preserve">
    <value>Include the diagnostic loopback endpoints</value>
  </data>
  <data name="ParameterEnumEndpointsVerboseOutput" xml:space="preserve">
    <value>Include more details for each endpoint</value>
  </data>
  <data name="ParameterEnumLegacyEndpointsDirection" xml:space="preserve">
    <value>The direction of data flow for the endpoints to list</value>
  </data>
  <data name="ParameterEnumLegacyEndpointsIncludeEndpointId" xml:space="preserve">
    <value>Include the MIDI 1.0 Endpoint Id (the Port Id) in the output</value>
  </data>
  <data name="ParameterListenerMessagesFilter" xml:space="preserve">
    <value>(not yet implemented)</value>
  </data>
  <data name="ParameterMonitorEndpointAutoReconnect" xml:space="preserve">
    <value>Continue monitoring and automatically reconnect after device disconnection, if device becomes available (unplug/replug).</value>
  </data>
  <data name="ParameterMonitorEndpointDirectionDescription" xml:space="preserve">
    <value>The direction of the endpoint referenced by the Id. If this doesn't match the endpoint type, the connection will fail.</value>
  </data>
  <data name="ParameterMonitorEndpointSingleMessage" xml:space="preserve">
    <value>Wait for a single incoming message only</value>
  </data>
  <data name="ParameterMonitorEndpointSkipToKeepUp" xml:space="preserve">
    <value>If you are monitoring very fast input from a device, the display can start to lag behind considerably. In that case, set this to true and messages will be skipped (only on the display output) to try to keep the display output roughly in time with the messages received.</value>
  </data>
  <data name="ParameterMonitorEndpointVerbose" xml:space="preserve">
    <value>Provide additional columns of information for each message</value>
  </data>
  <data name="ParameterRequestEndpointMetadataAll" xml:space="preserve">
    <value>Request all endpoint information</value>
  </data>
  <data name="ParameterRequestEndpointMetadataDeviceIdentityNotification" xml:space="preserve">
    <value>Request a device identity notification</value>
  </data>
  <data name="ParameterRequestEndpointMetadataEndpointInfoNotification" xml:space="preserve">
    <value>Request the endpoint information notification</value>
  </data>
  <data name="ParameterRequestEndpointMetadataEndpointNameNotification" xml:space="preserve">
    <value>Request an endpoint name notification. May result in multiple response messages.</value>
  </data>
  <data name="ParameterRequestEndpointMetadataEndpointProductInstanceIdNotification" xml:space="preserve">
    <value>Request a product instance id notification. May result in multiple response messages.</value>
  </data>
  <data name="ParameterRequestEndpointMetadataEndpointStreamConfigurationNotification" xml:space="preserve">
    <value>Request a stream configuration notification</value>
  </data>
  <data name="ParameterRequestEndpointMetadataEndpointUmpVersionMajor" xml:space="preserve">
    <value>The UMP specification major version. The default is usually sufficient.</value>
  </data>
  <data name="ParameterRequestEndpointMetadataEndpointUmpVersionMinor" xml:space="preserve">
    <value>The UMP specification minor version. The default is usually sufficient.</value>
  </data>
  <data name="ParameterRequestFunctionBlockInfoNotification" xml:space="preserve">
    <value>Request the general information for a function block</value>
  </data>
  <data name="ParameterRequestFunctionBlockNameNotification" xml:space="preserve">
    <value>Request the name for a function block</value>
  </data>
  <data name="ParameterRequestFunctionBlockNumber" xml:space="preserve">
    <value>Request just the specified function block number</value>
  </data>
  <data name="ParameterRequestFunctionBlocksAll" xml:space="preserve">
    <value>Request all function blocks for this endpoint</value>
  </data>
  <data name="ParameterSendMessageAutoIncrementLastWord" xml:space="preserve">
    <value>This is for developers and those who want to check that all messages are being sent/received in the correct order. When set, it will auto-increment the last word you have specified by 1 for each message sent. Requires that a message of two or more words be used so that the message type nibble isn't impacted.</value>
  </data>
  <data name="ParameterSendMessageCount" xml:space="preserve">
    <value>Number of times to send this message</value>
  </data>
  <data name="ParameterSendMessageDelayBetweenMessages" xml:space="preserve">
    <value>Pause (delay), in milliseconds, between messages to time messages and/or allow slower devices to process incoming data without buffer overruns. This is an approximate delay and is dependent on the system thread timers. Specify 0 for no delay.</value>
  </data>
  <data name="ParameterSendMessageEndpointDirectionDescription" xml:space="preserve">
    <value>The direction of the endpoint referenced by the Id. If this doesn't match the endpoint type, the connection will fail.</value>
  </data>
  <data name="ParameterSendMessagesFileCommandFile" xml:space="preserve">
    <value>Path and filename of the text file to send. This can include lines which begin with # for a comment, or are completely empty for spacing. Remaining lines must be valid delimited (big-endian) hexadecimal UMP words.</value>
  </data>
  <data name="ParameterSendMessagesFileFieldDelimiter" xml:space="preserve">
    <value>Delimiter between fields. Set to "Auto" to have this evaluated for each line. Valid values include:</value>
  </data>
  <data name="ParameterSendMessagesFileReplaceGroup" xml:space="preserve">
    <value>For non-stream messages, replace the second nibble with the specified new group index. Helpful when sending previously-recorded SysEx to a new group.</value>
  </data>
  <data name="ParameterSendMessagesFileVerbose" xml:space="preserve">
    <value>Verbose output as the messages are sent</value>
  </data>
  <data name="ParameterSendMessageTimestamp" xml:space="preserve">
    <value>Absolute timestamp value to use for all messages. User 0 to bypass scheduling and send immediately.</value>
  </data>
  <data name="ParameterSendMessageTimestampOffsetMicroseconds" xml:space="preserve">
    <value>Timestamp offset in microseconds (1/1,000,000 of a second) to use when scheduling this message. A new timestamp with this offset is calculated for each sent message as it is sent.</value>
  </data>
  <data name="ParameterSendMessageWordFormat" xml:space="preserve">
    <value>Data format for the individual words. Valid values include:</value>
  </data>
  <data name="ParameterSendMessageWords" xml:space="preserve">
    <value>32-bit MIDI words, typically in hexadecimal 0x00000000 format, same as the MIDI protocol wire format. Use the parameter name in front of each word sent.</value>
  </data>
  <data name="ParameterServicePingCount" xml:space="preserve">
    <value>Number of times to ping the MIDI Windows Service</value>
  </data>
  <data name="ParameterServicePingTimeout" xml:space="preserve">
    <value>Total ping timeout in milliseconds. Does not include the session and connection creation and teardown time.</value>
  </data>
  <data name="ParameterServicePingVerbose" xml:space="preserve">
    <value>True to show details from each ping request and response.</value>
  </data>
  <data name="ParameterServiceStatusVerbose" xml:space="preserve">
    <value>Report additional details about the service</value>
  </data>
  <data name="PingResultTableColumnHeaderPing" xml:space="preserve">
    <value>Ping</value>
  </data>
  <data name="PingResultTableColumnHeaderReceiveTimestamp" xml:space="preserve">
    <value>Client
Receive
Timestamp</value>
  </data>
  <data name="PingResultTableColumnHeaderRoundTripMicroseconds" xml:space="preserve">
    <value>Client
Round Trip
Microseconds</value>
  </data>
  <data name="PingResultTableColumnHeaderRoundTripMilliseconds" xml:space="preserve">
    <value>Client
Round Trip
Milliseconds</value>
  </data>
  <data name="PingResultTableColumnHeaderRoundTripTicks" xml:space="preserve">
    <value>Client
Round Trip
System Ticks</value>
  </data>
  <data name="PingResultTableColumnHeaderSendTimestamp" xml:space="preserve">
    <value>Client
Send
Timestamp</value>
  </data>
  <data name="PingResultTableColumnHeaderServiceBreakdown" xml:space="preserve">
    <value>Service
Receive/Send
System Ticks</value>
  </data>
  <data name="PingResultTableColumnHeaderServiceTimestamp" xml:space="preserve">
    <value>Service
Receive
Timestamp</value>
  </data>
  <data name="PropertiesTableColumnHeaderProperty" xml:space="preserve">
    <value>Property</value>
  </data>
  <data name="PropertiesTableColumnHeaderValue" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="PropertiesTablePropertyLabelContainerId" xml:space="preserve">
    <value>Container Id</value>
  </data>
  <data name="PropertiesTablePropertyLabelDescription" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="PropertiesTablePropertyLabelDeviceFamily" xml:space="preserve">
    <value>Device Family</value>
  </data>
  <data name="PropertiesTablePropertyLabelDeviceFamilyModelNumber" xml:space="preserve">
    <value>Device Family Model #</value>
  </data>
  <data name="PropertiesTablePropertyLabelDeviceInstanceId" xml:space="preserve">
    <value>Device Instance Id</value>
  </data>
  <data name="PropertiesTablePropertyLabelEndpointSuppliedName" xml:space="preserve">
    <value>Endpoint-Supplied Name</value>
  </data>
  <data name="PropertiesTablePropertyLabelId" xml:space="preserve">
    <value>Id</value>
  </data>
  <data name="PropertiesTablePropertyLabelLargeImagePath" xml:space="preserve">
    <value>Large Image Path</value>
  </data>
  <data name="PropertiesTablePropertyLabelManufacturer" xml:space="preserve">
    <value>Manufacturer</value>
  </data>
  <data name="PropertiesTablePropertyLabelMultiClient" xml:space="preserve">
    <value>Multi-client</value>
  </data>
  <data name="PropertiesTablePropertyLabelName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="PropertiesTablePropertyLabelNativeDataFormat" xml:space="preserve">
    <value>Native data format</value>
  </data>
  <data name="PropertiesTablePropertyLabelProductInstanceId" xml:space="preserve">
    <value>Product Instance Id</value>
  </data>
  <data name="PropertiesTablePropertyLabelPurpose" xml:space="preserve">
    <value>Purpose</value>
  </data>
  <data name="PropertiesTablePropertyLabelSerialNumber" xml:space="preserve">
    <value>Serial Number</value>
  </data>
  <data name="PropertiesTablePropertyLabelSmallImagePath" xml:space="preserve">
    <value>Small Image Path</value>
  </data>
  <data name="PropertiesTablePropertyLabelSoftwareRevisionLevel" xml:space="preserve">
    <value>Software RevisionLevel</value>
  </data>
  <data name="PropertiesTablePropertyLabelSystemExclusiveId" xml:space="preserve">
    <value>System Exclusive Id</value>
  </data>
  <data name="PropertiesTablePropertyLabelTransportSuppliedDescription" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="PropertiesTablePropertyLabelUserSuppliedName" xml:space="preserve">
    <value>User-Supplied Name</value>
  </data>
  <data name="PropertiesTablePropertyLabelVidPid" xml:space="preserve">
    <value>USB VID / PID</value>
  </data>
  <data name="PropertiesTableSectionHeaderEndpointMetadata" xml:space="preserve">
    <value>Endpoint Metadata</value>
  </data>
  <data name="PropertiesTableSectionHeaderIdentification" xml:space="preserve">
    <value>Identification</value>
  </data>
  <data name="PropertiesTableSectionHeaderUserData" xml:space="preserve">
    <value>User Data</value>
  </data>
  <data name="PropertyTableErrorNoMatchingContainer" xml:space="preserve">
    <value>No matching container found</value>
  </data>
  <data name="PropertyTableErrorNoMatchingParent" xml:space="preserve">
    <value>No device parent found</value>
  </data>
  <data name="PropertyTableHeaderRawProperties" xml:space="preserve">
    <value>Raw Properties</value>
  </data>
  <data name="PropertyTablePropertyLabelCommonLastUpdated" xml:space="preserve">
    <value>Last Updated</value>
  </data>
  <data name="PropertyTablePropertyLabelConfiguredMIDI1Protocol" xml:space="preserve">
    <value>MIDI 1.0 Protocol</value>
  </data>
  <data name="PropertyTablePropertyLabelConfiguredMIDI2Protocol" xml:space="preserve">
    <value>MIDI 2.0 Protocol</value>
  </data>
  <data name="PropertyTablePropertyLabelConfiguredReceiveJR" xml:space="preserve">
    <value>Receiving JR Timestamps</value>
  </data>
  <data name="PropertyTablePropertyLabelConfiguredSendJR" xml:space="preserve">
    <value>Sending JR Timestamps</value>
  </data>
  <data name="PropertyTablePropertyLabelContainerId" xml:space="preserve">
    <value>Id</value>
  </data>
  <data name="PropertyTablePropertyLabelContainerKind" xml:space="preserve">
    <value>Kind</value>
  </data>
  <data name="PropertyTablePropertyLabelContainerName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="PropertyTablePropertyLabelDeviceIdentityLastUpdated" xml:space="preserve">
    <value>Device Identity Last Updated</value>
  </data>
  <data name="PropertyTablePropertyLabelEndpointInfoLastUpdated" xml:space="preserve">
    <value>Endpoint Information Last Updated</value>
  </data>
  <data name="PropertyTablePropertyLabelEndpointSuppliedNameLastUpdated" xml:space="preserve">
    <value>Endpoint Name Last Updated</value>
  </data>
  <data name="PropertyTablePropertyLabelFunctionBlock" xml:space="preserve">
    <value>Function Block</value>
  </data>
  <data name="PropertyTablePropertyLabelFunctionBlockActive" xml:space="preserve">
    <value>Active</value>
  </data>
  <data name="PropertyTablePropertyLabelFunctionBlockDirection" xml:space="preserve">
    <value>Direction</value>
  </data>
  <data name="PropertyTablePropertyLabelFunctionBlockFirstGroupIndex" xml:space="preserve">
    <value>First Group Index</value>
  </data>
  <data name="PropertyTablePropertyLabelFunctionBlockGroupCount" xml:space="preserve">
    <value>Group Count</value>
  </data>
  <data name="PropertyTablePropertyLabelFunctionBlockMaxSysEx8Streams" xml:space="preserve">
    <value>Max SysEx 8 Streams</value>
  </data>
  <data name="PropertyTablePropertyLabelFunctionBlockMIDI10Connection" xml:space="preserve">
    <value>MIDI 1.0</value>
  </data>
  <data name="PropertyTablePropertyLabelFunctionBlockMIDICIVersionFormat" xml:space="preserve">
    <value>MIDI CI Version/Format</value>
  </data>
  <data name="PropertyTablePropertyLabelFunctionBlocksDeclaredCount" xml:space="preserve">
    <value>Declared Function Block Count</value>
  </data>
  <data name="PropertyTablePropertyLabelFunctionBlocksStatic" xml:space="preserve">
    <value>Static Function Blocks</value>
  </data>
  <data name="PropertyTablePropertyLabelFunctionBlockUIHint" xml:space="preserve">
    <value>UI Hint</value>
  </data>
  <data name="PropertyTablePropertyLabelGTBGroupCount" xml:space="preserve">
    <value>Group Count</value>
  </data>
  <data name="PropertyTablePropertyLabelGTBMaxInputBandwidth" xml:space="preserve">
    <value>Max Input Bandwidth</value>
  </data>
  <data name="PropertyTablePropertyLabelGTBMaxOutputBandwidth" xml:space="preserve">
    <value>Max Output Bandwidth</value>
  </data>
  <data name="PropertyTablePropertyLabelParentId" xml:space="preserve">
    <value>Id</value>
  </data>
  <data name="PropertyTablePropertyLabelParentKind" xml:space="preserve">
    <value>Kind</value>
  </data>
  <data name="PropertyTablePropertyLabelParentName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="PropertyTablePropertyLabelProductInstanceIdLastUpdated" xml:space="preserve">
    <value>Product Instance Id Last Updated</value>
  </data>
  <data name="PropertyTablePropertyLabelProtocol" xml:space="preserve">
    <value>Protocol</value>
  </data>
  <data name="PropertyTablePropertyLabelSupportsReceivingJR" xml:space="preserve">
    <value>Supports Receiving JR Time</value>
  </data>
  <data name="PropertyTablePropertyLabelSupportsSendingJR" xml:space="preserve">
    <value>Supports Sending JR Time</value>
  </data>
  <data name="PropertyTablePropertyLabelTransportId" xml:space="preserve">
    <value>Transport Id</value>
  </data>
  <data name="PropertyTablePropertyLabelTransportCode" xml:space="preserve">
    <value>Transport Code</value>
  </data>
  <data name="PropertyTablePropertyLabelTransportSuppliedName" xml:space="preserve">
    <value>Transport-supplied Name</value>
  </data>
  <data name="PropertyTablePropertyLabelUMPVersion" xml:space="preserve">
    <value>UMP Version</value>
  </data>
  <data name="PropertyTablePropertyValueFunctionBlockSysEx8NotSupported" xml:space="preserve">
    <value>SysEx 8 Not Supported</value>
  </data>
  <data name="PropertyTablePropertyValueFunctionBlockSysEx8SingleStreamSupported" xml:space="preserve">
    <value>Single SysEx Stream</value>
  </data>
  <data name="PropertyTablePropertyValueGTBInputBandwidthUnknownOrNotFixed" xml:space="preserve">
    <value>0 (Unknown or Not Fixed)</value>
  </data>
  <data name="PropertyTablePropertyValueSuffixFunctionBlockMultipleSysexStreams" xml:space="preserve">
    <value>SysEx Streams</value>
  </data>
  <data name="PropertyTableSectionDescriptionActiveConfiguration" xml:space="preserve">
    <value>From endpoint discovery and protocol negotiation and represent the current configuration of the endpoint.</value>
  </data>
  <data name="PropertyTableSectionDescriptionContainer" xml:space="preserve">
    <value>The container is how Windows groups related devices</value>
  </data>
  <data name="PropertyTableSectionDescriptionDeclaredCapabilities" xml:space="preserve">
    <value>From endpoint discovery and protocol negotiation and represent the capabilities of the endpoint.</value>
  </data>
  <data name="PropertyTableSectionDescriptionEndpointMetadata" xml:space="preserve">
    <value>Metadata captured using MIDI 2.0 endpoint discovery</value>
  </data>
  <data name="PropertyTableSectionDescriptionFunctionBlocks" xml:space="preserve">
    <value>Function blocks are discovered through endpoint discovery in-protocol.</value>
  </data>
  <data name="PropertyTableSectionDescriptionParentDevice" xml:space="preserve">
    <value>The device which "owns" this endpoint. In some cases, this is a software device.</value>
  </data>
  <data name="PropertyTableSectionDescriptionTransportInformation" xml:space="preserve">
    <value>From the transport plugin in the service (and from the driver in cases where a driver is used)</value>
  </data>
  <data name="PropertyTableSectionHeaderActiveConfiguration" xml:space="preserve">
    <value>Active Configuration</value>
  </data>
  <data name="PropertyTableSectionHeaderAdditionalProperties" xml:space="preserve">
    <value>Additional Capabilities/Properties</value>
  </data>
  <data name="PropertyTableSectionHeaderContainer" xml:space="preserve">
    <value>Container</value>
  </data>
  <data name="PropertyTableSectionHeaderDeclaredCapabilities" xml:space="preserve">
    <value>Declared Capabilities</value>
  </data>
  <data name="PropertyTableSectionHeaderFunctionBlocks" xml:space="preserve">
    <value>Function Blocks</value>
  </data>
  <data name="PropertyTableSectionHeaderGroupTerminalBlocks" xml:space="preserve">
    <value>Group Terminal Blocks</value>
  </data>
  <data name="PropertyTableSectionHeaderParentDevice" xml:space="preserve">
    <value>Parent Device</value>
  </data>
  <data name="PropertyTableSectionHeaderTransportInformation" xml:space="preserve">
    <value>Transport Information</value>
  </data>
  <data name="PropertyTableSectionNoteGTBFunctionBlocksAlsoPresent" xml:space="preserve">
    <value>Function blocks are also present, and will be more accurate.</value>
  </data>
  <data name="PropertyValueNativeDataFormatByteStream" xml:space="preserve">
    <value>Byte Data Format (MIDI 1.0)</value>
  </data>
  <data name="PropertyValueNativeDataFormatUmp" xml:space="preserve">
    <value>Universal MIDI Packet (MIDI 1.0 or MIDI 2.0 protocol)</value>
  </data>
  <data name="PropertyValueNativeDataFormatUnknown" xml:space="preserve">
    <value>Unknown Data Format</value>
  </data>
  <data name="SendMessageEscapePressedMessage" xml:space="preserve">
    <value>Escape key pressed. Message sending terminated.</value>
  </data>
  <data name="SendMessageFloodWarning" xml:space="preserve">
    <value>Warning: sending a large number of messages with no delay can result in flooding the buffers. This is especially true of software endpoints like the loopback, or slow external hardware. Message loss may result.</value>
  </data>
  <data name="SendMessagePressEscapeToStopSendingMessage" xml:space="preserve">
    <value>Press escape to stop sending messages.</value>
  </data>
  <data name="SendMessageResultTableColumnHeaderTimestamp" xml:space="preserve">
    <value>Timestamp</value>
  </data>
  <data name="SendMessageResultTableColumnHeaderWordsSent" xml:space="preserve">
    <value>MIDI Words Sent</value>
  </data>
  <data name="SendMessageSendingThroughEndpointLabel" xml:space="preserve">
    <value>Sending MIDI message(s) through</value>
  </data>
  <data name="SendMessageSessionNameSuffix" xml:space="preserve">
    <value>Sender</value>
  </data>
  <data name="StatusCreatingSessionAndOpeningEndpoint" xml:space="preserve">
    <value>Creating session and opening endpoint...</value>
  </data>
  <data name="TableColumnHeaderCommonDetailedMessageType" xml:space="preserve">
    <value>Specific Type</value>
  </data>
  <data name="TableColumnHeaderCommonMessageType" xml:space="preserve">
    <value>Message Type</value>
  </data>
  <data name="TableColumnHeaderCommonTimestamp" xml:space="preserve">
    <value>Timestamp</value>
  </data>
  <data name="ValidationErrorInvalidGroup" xml:space="preserve">
    <value>The specified group index is invalid. Specify a group index between 0 and 15.</value>
  </data>
  <data name="ValidationErrorInvalidMessageCount" xml:space="preserve">
    <value>Please provide a count &gt; 0.</value>
  </data>
  <data name="ValidationErrorPingCountTooHigh" xml:space="preserve">
    <value>Specified ping count is too high. Please provide a value &lt;= 255.</value>
  </data>
  <data name="ValidationErrorPingCountTooLow" xml:space="preserve">
    <value>Specified ping count is too low. Please provide a value &gt; 0.</value>
  </data>
  <data name="ValidationErrorPingTimeoutTooLow" xml:space="preserve">
    <value>Specified timeout is too low. Please provide a value &gt;= 10ms.</value>
  </data>
  <data name="WatcherEscapePressedMessage" xml:space="preserve">
    <value>Escape key pressed. Shutting down watcher.</value>
  </data>
  <data name="WatcherPressEscapeToStopWatchingMessage" xml:space="preserve">
    <value>Press escape to stop watching for endpoint changes.</value>
  </data>
  <data name="CommandSendSysExFileDescription" xml:space="preserve">
    <value>(Experimental Feature) Send a file of MIDI 1.0 or MIDI 2.0 SysEx messages (7 or 8 bit, binary or text) to a compatible endpoint.</value>
  </data>
  <data name="ErrorMidiServiceNotAvailable" xml:space="preserve">
    <value>The MIDI Service is not available.</value>
  </data>
  <data name="NotificationEndpointDeviceWatcherStopped" xml:space="preserve">
    <value>Watcher Stopped</value>
  </data>
  <data name="NotificationEndpointDeviceWatcherInitialEnumerationCompleted" xml:space="preserve">
    <value>Initial Enumeration Completed</value>
  </data>
  <data name="NotificationEndpointDeviceWatcherEndpointRemoved" xml:space="preserve">
    <value>Endpoint Removed</value>
  </data>
  <data name="NotificationEndpointDeviceWatcherEndpointUpdated" xml:space="preserve">
    <value>Endpoint Updated</value>
  </data>
  <data name="NotificationEndpointDeviceWatcherEndpointUpdatedName" xml:space="preserve">
    <value>Name Updated</value>
  </data>
  <data name="NotificationEndpointDeviceWatcherEndpointUpdatedEndpointInformation" xml:space="preserve">
    <value>Endpoint Information Updated</value>
  </data>
  <data name="NotificationEndpointDeviceWatcherEndpointUpdatedStreamConfiguration" xml:space="preserve">
    <value>Stream Configuration Updated</value>
  </data>
  <data name="NotificationEndpointDeviceWatcherEndpointUpdatedFunctionBlocks" xml:space="preserve">
    <value>Function Blocks Updated</value>
  </data>
  <data name="NotificationEndpointDeviceWatcherEndpointUpdatedDeviceIdentity" xml:space="preserve">
    <value>Device Identity Updated</value>
  </data>
  <data name="NotificationEndpointDeviceWatcherEndpointUpdatedUserMetadata" xml:space="preserve">
    <value>User Metadata Updated</value>
  </data>
  <data name="NotificationEndpointDeviceWatcherEndpointUpdatedAdditionalCapabilities" xml:space="preserve">
    <value>Additional Capabilities Updated</value>
  </data>
  <data name="NotificationEndpointDeviceWatcherEndpointAdded" xml:space="preserve">
    <value>Endpoint Added</value>
  </data>
  <data name="EndpointReconnected" xml:space="preserve">
    <value>Endpoint reconnected</value>
  </data>
  <data name="CommonStringCanceled" xml:space="preserve">
    <value>Canceled</value>
  </data>
  <data name="ErrorSdkInitializationFailed" xml:space="preserve">
    <value>Windows MIDI Services SDK runtime failed to initialize. Is it installed?</value>
  </data>
  <data name="ErrorSdkInitializerInitializationFailed" xml:space="preserve">
    <value>Windows MIDI Services SDK runtime failed to initialize. Is it installed? (COM object may not be available or registered)</value>
  </data>
  <data name="ErrorSdkInitializerInitializationFailedExceptionInCreate" xml:space="preserve">
    <value>Windows MIDI Services SDK runtime failed to initialize. Is it installed? (Exception creating initializer)</value>
  </data>
  <data name="CommandEnumerateMdnsAdvertisementsDescription" xml:space="preserve">
    <value>List discovered MDNS advertisements for Network MIDI 2.0 (UDP) services on the network.</value>
  </data>
  <data name="ParameterPlayNotesIndexes" xml:space="preserve">
    <value>List of space-separated MIDI 1.0 note indexes (0-127 decimal)</value>
  </data>
  <data name="ParameterPlayNotesLengthMilliseconds" xml:space="preserve">
    <value>Length / duration of the note in whole decimal milliseconds.</value>
  </data>
  <data name="ParameterPlayNotesGroupNumber" xml:space="preserve">
    <value>Number (1-16 decimal) for the group to send the messages to</value>
  </data>
  <data name="ParameterPlayNotesChannelNumber" xml:space="preserve">
    <value>Number (1-16 decimal) of the channel to send the messages to</value>
  </data>
  <data name="ParameterPlayNotesVelocity" xml:space="preserve">
    <value>Note velocity (1.0 - 100.0) as a fractional decimal percentage of the maximum value for the protocol.</value>
  </data>
  <data name="ParameterPlayNotesForever" xml:space="preserve">
    <value>Set to true to continue to loop through the notes until you press the escape key</value>
  </data>
  <data name="CommandPlayNotesDescription" xml:space="preserve">
    <value>Send MIDI 1.0 or 2.0 note on and off messages to the endpoint</value>
  </data>
  <data name="NotificationEndpointDeviceWatcherEndpointUpdatedUniqueIds" xml:space="preserve">
    <value>Unique identifiers updated</value>
  </data>
  <data name="CommandEnumerateEndpointPropertyKeysDescription" xml:space="preserve">
    <value>List the Windows MIDI Services-specific property keys</value>
  </data>
  <data name="ParameterPlayNotesRestMilliseconds" xml:space="preserve">
    <value>Duration of wait time between notes, in whole decimal milliseconds</value>
  </data>
  <data name="ParameterPlayNotesMidi2" xml:space="preserve">
    <value>Set to true to use MIDI 2.0 protocol messages (type 4) instead of MIDI 1.0 protocol (type 2)</value>
  </data>
  <data name="ServiceSetAutoDelayedStartDescription" xml:space="preserve">
    <value>Set the MIDI Service to start shortly after Windows starts, to avoid connection delays with the first connection made by an app.</value>
  </data>
  <data name="ParameterServiceRestart" xml:space="preserve">
    <value>Restart the service when complete</value>
  </data>
  <data name="DirectionMessageSource" xml:space="preserve">
    <value>Message Source (MIDI In)</value>
  </data>
  <data name="DirectionMessageDestination" xml:space="preserve">
    <value>Message Destination (MIDI Out)</value>
  </data>
  <data name="DirectionMessageBiDi" xml:space="preserve">
    <value>Source/Destination</value>
  </data>
  <data name="Unknown" xml:space="preserve">
    <value>Unknown</value>
  </data>
  <data name="ParameterSendMessageNoWait" xml:space="preserve">
    <value>Do not prompt the user to hit any key to close the connection</value>
  </data>
  <data name="SendMessagePressEscapeToCloseConnectionMessage" xml:space="preserve">
    <value>Press escape to close the connection when the endpoint has received all the messages.</value>
  </data>
  <data name="PropertyTableSectionHeaderMidi1Ports" xml:space="preserve">
    <value>Associated MIDI 1 Ports</value>
  </data>
  <data name="PropertyTableNoAssociatedMidi1SourcePorts" xml:space="preserve">
    <value>No associated MIDI 1 sources (MIDI in ports)</value>
  </data>
  <data name="PropertyTableNoAssociatedMidi1DestinationPorts" xml:space="preserve">
    <value>No associated MIDI 1 destinations (MIDI out ports)</value>
  </data>
  <data name="PropertyTableSectionDescriptionMidi1Ports" xml:space="preserve">
    <value>The associated MIDI 1.0 ports. The number to the left of the port name is the current WinMM port index.</value>
  </data>
  <data name="PropertyTableSectionDescriptionGroupTerminalBlocks" xml:space="preserve">
    <value>For USB MIDI 2.0 devices, Group Terminal Blocks are fallback functions for when Function Blocks are not available. For MIDI 1.0 devices, Group Terminal Blocks are 1:1 with MIDI ports (although the names may be different)</value>
  </data>
  <data name="DevicePurposeDiagnosticLoopback" xml:space="preserve">
    <value>Diagnostic Loopback for testing and troubleshooting purposes</value>
  </data>
  <data name="DevicePurposeDiagnosticPing" xml:space="preserve">
    <value>Diagnostic Ping for testing purposes (not for app use)</value>
  </data>
  <data name="DevicePurposeVirtualDeviceResponder" xml:space="preserve">
    <value>Virtual Device (private device-side endpoint not for general app use)</value>
  </data>
  <data name="DevicePurposeInBoxGeneralMidiSynth" xml:space="preserve">
    <value>In-box General MIDI synthesizer</value>
  </data>
  <data name="DevicePurposeNormalMessageEndpoint" xml:space="preserve">
    <value>Normal message endpoint for app use</value>
  </data>
  <data name="DevicePurposeUnknown" xml:space="preserve">
    <value>Unknown endpoint purpose</value>
  </data>
  <data name="PropertyTableSectionDescriptionIdentification" xml:space="preserve">
    <value>Basic identification information for this endpoint</value>
  </data>
  <data name="PropertyTableSectionDescriptionUserData" xml:space="preserve">
    <value>Custom information supplied by the user via the MIDI Settings app and/or configuration files.</value>
  </data>
  <data name="PropertyTableSectionHeaderMidiProperties" xml:space="preserve">
    <value>MIDI-Specific Properties</value>
  </data>
  <data name="PropertyTableSectionDescriptionMidiProperties" xml:space="preserve">
    <value>Properties added by Windows MIDI Services. The STRING_PKEY_MIDI_ prefix has been omitted for brevity.</value>
  </data>
  <data name="ParameterSendSysExFileVerbose" xml:space="preserve">
    <value>Report detailed output when sending the file</value>
  </data>
  <data name="ParameterSendSysExFileReplaceGroup" xml:space="preserve">
    <value>For outgoing UMP format messages, replace the group index with this new value. If missing, the group indexes in the file will be used.</value>
  </data>
  <data name="StartingMidiService" xml:space="preserve">
    <value>Starting MIDI Service ...</value>
  </data>
  <data name="ParameterSendClockTempo" xml:space="preserve">
    <value>Clock tempo in beats-per-minute. Fractional amounts are allowed.</value>
  </data>
  <data name="ParameterSendClockPPQN" xml:space="preserve">
    <value>Clock messages (pulses) per quarter note. Normally, this is 24, but for some uses, 48 is common.</value>
  </data>
  <data name="ParameterSendClockGroupNumbers" xml:space="preserve">
    <value>The list of groups to send the clock messages to</value>
  </data>
  <data name="CommandSendClockDescription" xml:space="preserve">
    <value>(Experimental Feature) Send MIDI beat clock to one or more groups on an endpoint</value>
  </data>
  <data name="SendClockPressEscapeToStopSendingMessage" xml:space="preserve">
    <value>Press escape to stop sending MIDI beat clock messages.</value>
  </data>
  <data name="ParameterSendClockSendMidiStartMessage" xml:space="preserve">
    <value>Set this option to send a MIDI Start message</value>
  </data>
  <data name="ParameterSendClockSendMidiStopMessage" xml:space="preserve">
    <value>Set this option to send a MIDI Stop message</value>
  </data>
</root>