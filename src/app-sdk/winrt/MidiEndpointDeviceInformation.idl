// Copyright (c) Microsoft Corporation and Contributors.
// Licensed under the MIT License
// ============================================================================
// This is part of the Windows MIDI Services App SDK and should be used
// in your Windows application via an official binary distribution.
// Further information: https://aka.ms/midi
// ============================================================================


import "MidiApiContracts.idl";

import "MidiGroup.idl";
import "MidiGroupTerminalBlock.idl";
import "MidiProtocolEnum.idl";
import "MidiEndpointNativeDataFormatEnum.idl";
import "MidiEndpointDevicePurposeEnum.idl";
import "MidiFunctionBlock.idl";
import "MidiDeclaredDeviceIdentity.idl";
import "MidiDeclaredEndpointInfo.idl";
import "MidiDeclaredStreamConfiguration.idl";
import "MidiEndpointTransportSuppliedInfo.idl";
import "MidiEndpointUserSuppliedInfo.idl";

import "MidiEndpointDeviceInformationSortOrderEnum.idl";
import "MidiEndpointDeviceInformationFiltersEnum.idl";

import "MidiEndpointAssociatedPortDeviceInformation.idl";

import "Midi1PortFlowEnum.idl";
import "Midi1PortNameTableEntry.idl";


namespace Microsoft.Windows.Devices.Midi2
{
    [contract(MidiEnumerationApiContract, 1)]
    [interface_name("Microsoft.Windows.Devices.Midi2.IMidiEndpointDeviceInformation", 8087b303-0519-31d1-c0de-dd000000a000)]
    [static_name("Microsoft.Windows.Devices.Midi2.IMidiEndpointDeviceInformationStatics", 8087b303-0519-31d1-c0de-ee000000a000)]
    runtimeclass MidiEndpointDeviceInformation : Windows.Foundation.IStringable
    {
        static MidiEndpointDeviceInformation CreateFromEndpointDeviceId(String endpointDeviceId);

        static IVectorView<MidiEndpointDeviceInformation> FindAll();
        static IVectorView<MidiEndpointDeviceInformation> FindAll(MidiEndpointDeviceInformationSortOrder sortOrder);
        static IVectorView<MidiEndpointDeviceInformation> FindAll(MidiEndpointDeviceInformationSortOrder sortOrder, MidiEndpointDeviceInformationFilters endpointTypesToInclude);

        
        static MidiEndpointDeviceInformation CreateFromAssociatedMidi1PortDeviceId(String deviceId);
        static MidiEndpointDeviceInformation CreateFromAssociatedMidi1PortNumber(UInt32 portNumber, Midi1PortFlow portFlow);
        static String FindEndpointDeviceIdForAssociatedMidi1PortNumber(UInt32 portNumber, Midi1PortFlow portFlow);

        static IVectorView<MidiEndpointDeviceInformation> FindAllForAssociatedMidi1PortName(String portName, Midi1PortFlow portFlow);
        static IVectorView<String> FindAllEndpointDeviceIdsForAssociatedMidi1PortName(String portName, Midi1PortFlow portFlow);


        static Guid EndpointInterfaceClass{ get; };

        static IVectorView<String> GetAdditionalPropertiesList();

        static Boolean DeviceMatchesFilter(MidiEndpointDeviceInformation deviceInformation, MidiEndpointDeviceInformationFilters endpointTypesToInclude);



        String EndpointDeviceId { get; };

        String Name{ get; };

        Guid ContainerId{ get; };
        String DeviceInstanceId{ get; };

        MidiEndpointDevicePurpose EndpointPurpose{ get; };


        MidiDeclaredEndpointInfo GetDeclaredEndpointInfo();
        Windows.Foundation.DateTime DeclaredEndpointInfoLastUpdateTime{ get; };

        MidiDeclaredDeviceIdentity GetDeclaredDeviceIdentity();
        Windows.Foundation.DateTime DeclaredDeviceIdentityLastUpdateTime{ get; };

        MidiDeclaredStreamConfiguration GetDeclaredStreamConfiguration();
        Windows.Foundation.DateTime DeclaredStreamConfigurationLastUpdateTime{ get; };

        IVectorView<MidiFunctionBlock> GetDeclaredFunctionBlocks();
        Windows.Foundation.DateTime DeclaredFunctionBlocksLastUpdateTime{ get; };

        IVectorView<MidiGroupTerminalBlock> GetGroupTerminalBlocks();

        MidiEndpointUserSuppliedInfo GetUserSuppliedInfo();

        MidiEndpointTransportSuppliedInfo GetTransportSuppliedInfo();


        Windows.Devices.Enumeration.DeviceInformation GetParentDeviceInformation();
        Windows.Devices.Enumeration.DeviceInformation GetContainerDeviceInformation();

        Windows.Foundation.Collections.IMapView<String, IInspectable> Properties{ get; };

        IVectorView<Midi1PortNameTableEntry> GetNameTable();

        // these are for finding the MIDI 1.0 (WinMM and WinRT 1.0) ports which were created from this UMP endpoint
        IVectorView<MidiEndpointAssociatedPortDeviceInformation> FindAllAssociatedMidi1PortsForThisEndpoint(Midi1PortFlow portFlow);
        IVectorView<MidiEndpointAssociatedPortDeviceInformation> FindAllAssociatedMidi1PortsForThisEndpoint(Midi1PortFlow portFlow, Boolean useCachedPortInformationIfAvailable);

        MidiEndpointAssociatedPortDeviceInformation FindAssociatedMidi1PortForGroupForThisEndpoint(MidiGroup group, Midi1PortFlow portFlow);
        MidiEndpointAssociatedPortDeviceInformation FindAssociatedMidi1PortForGroupForThisEndpoint(MidiGroup group, Midi1PortFlow portFlow, Boolean useCachedPortInformationIfAvailable);
    }
}